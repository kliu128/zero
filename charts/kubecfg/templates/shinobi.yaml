apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: shinobi
  name: shinobi
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: shinobi
    spec:
      nodeSelector:
        kubernetes.io/hostname: rem
      containers:
      - args: [node, /opt/shinobi/camera.js]
        image: moeiscool/docker-shinobi:latest
        name: shinobi
        resources: {}
        volumeMounts:
        - mountPath: /opt/shinobi/videos
          name: data
        - mountPath: /opt/dbdata
          name: database
        - mountPath: /opt/shinobi/conf.sample.json
          name: config
          subPath: conf.json
          readOnly: true
        - mountPath: /opt/shinobi/super.sample.json
          name: config
          subPath: super.json
          readOnly: true
      restartPolicy: Always
      volumes:
      - name: config
        secret:
          secretName: shinobi-config
      - name: data
        hostPath:
          path: /mnt/storage/Kevin/Computing/Data/Shinobi
          type: Directory
      - name: database
        persistentVolumeClaim:
          claimName: shinobi-database
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    app: shinobi
  name: shinobi-database
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: shinobi
  name: shinobi
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: shinobi
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/tls-acme: 'true'
  name: shinobi
spec:
  tls:
    - secretName: shinobi-tls
      hosts:
        - zm.potatofrom.space
  rules:
  - host: zm.potatofrom.space
    http:
      paths:
      - path: /
        backend:
          serviceName: shinobi
          servicePort: 8080