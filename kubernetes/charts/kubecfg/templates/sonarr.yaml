apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: sonarr
  name: sonarr
spec:
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      containers:
        - env:
            - name: PGID
              value: "100"
            - name: PUID
              value: "1000"
            - name: TZ
              value: America/New_York
          image: linuxserver/sonarr
          name: sonarr
          livenessProbe:
            httpGet:
              path: /
              port: 8989
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 15
          ports:
            - containerPort: 8989
          resources: {}
          volumeMounts:
            - mountPath: /config
              name: sonarr-config
            - mountPath: /tv
              name: tv
            - mountPath: /data
              name: sonarr-data
        - env:
            - name: PGID
              value: "100"
            - name: PUID
              value: "1000"
            - name: TZ
              value: America/New_York
          image: linuxserver/jackett
          name: jackett
          livenessProbe:
            httpGet:
              path: /
              port: 9117
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 15
          ports:
            - containerPort: 9117
          resources: {}
          volumeMounts:
            - mountPath: /config
              name: jackett-config
      restartPolicy: Always
      volumes:
        - name: sonarr-config
          persistentVolumeClaim:
            claimName: sonarr-config
        - name: sonarr-data
          nfs:
            path: /storage/Kevin/Incoming
            server: 192.168.1.5
        - name: jackett-config
          persistentVolumeClaim:
            claimName: jackett-config
        - name: tv
          nfs:
            path: /storage/Kevin/Videos/TV Shows
            server: 192.168.1.5
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: sonarr
  name: sonarr
spec:
  ports:
    - name: http
      port: 8989
      targetPort: 8989
  selector:
    app: sonarr
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    # type of authentication
    nginx.ingress.kubernetes.io/auth-type: basic
    # name of the secret that contains the user/password definitions
    nginx.ingress.kubernetes.io/auth-secret: sonarr-auth
    # message to display with an appropriate context why the authentication is required
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required - sonarr"
    kubernetes.io/tls-acme: "true"
  name: sonarr
spec:
  tls:
    - secretName: sonarr-tls
      hosts:
        - sonarr.potatofrom.space
  rules:
    - host: sonarr.potatofrom.space
      http:
        paths:
          - path: /
            backend:
              serviceName: sonarr
              servicePort: 8989
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    app: sonarr
  name: sonarr-config
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    app: sonarr
  name: jackett-config
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
status: {}
